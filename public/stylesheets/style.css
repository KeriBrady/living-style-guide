/*  Syntax Quick Reference
  --------------------------
  column($ratios: 1, $offset: 0, $cycle: 0, $uncycle: 0, $gutter: $jeet-gutter)
  span($ratio: 1, $offset: 0)
  shift($ratios: 0, $col_or_span: column, $gutter: $jeet-gutter)
  unshift()
  edit()
  center($max_width: 1410px, $pad: 0)
  stack($pad: 0, $align: false)
  unstack()
  align($direction: both)
  cf()
*/
/**
 * Grid settings.
 * All values are defaults and can therefore be easily overidden.
 */
/**
 * List functions courtesy of the wonderful folks at Team Sass.
 * Check out their awesome grid: Singularity.
 */
/**
 * Get  percentage from a given ratio.
 * @param {number} [$ratio=1] - The column ratio of the element.
 * @returns {number} - The percentage value.
 */
/**
 * Work out the column widths based on the ratio and gutter sizes.
 * @param {number} [$ratios=1] - The column ratio of the element.
 * @param {number} [$gutter=$jeet-gutter] - The gutter for the column.
 * @returns {list} $width $gutter - A list containing the with and gutter for the element.
 */
/**
 * Get the set layout direction for the project.
 * @returns {string} $direction - The layout direction.
 */
/**
 * Replace a specified list value with a new value (uses built in set-nth() if available)
 * @param {list} $list - The list of values you want to alter.
 * @param {number} $index - The index of the list item you want to replace.
 * @param {*} $value - The value you want to replace $index with.
 * @returns {list} $list - The list with the value replaced or removed.
 * @warn if an invalid index is supplied.
 */
/**
 * Reverse a list (progressively enhanced for Sass 3.3)
 * @param {list} $list - The list of values you want to reverse.
 * @returns {list} $result - The reversed list.
 */
/**
 * Get the opposite direction to a given value.
 * @param {string} $dir - The direction you want the opposite of.
 * @returns {string} - The opposite direction to $dir.
 * @warn if an incorrect string is provided.
 */
/**
 * Perform a value into a percentage value.
 * @param {number} $value - The value which should be converted.
 * @returns {number} $value - The percentage.
 */
/**
 * Style an element as a column with a gutter.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [$cycle=0] - Easily create an nth column grid where $cycle equals the number of columns.
 * @param {number} [$uncycle=0] - Undo a previous cycle value to allow for a new one.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Aliases for j-column().
 */
/**
 * Get the width of a column and nothing else.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Aliases for j-column-width().
 */
/**
 * Get the gutter size of a column and nothing else.
 * @param {number} [ratios=1] - A width relative to its container as a fraction.
 * @param {number} [gutter=jeet.gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Alias for j-column-gutter().
 */
/**
 * Style an element as a column without any gutters for a seamless row.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [cycle=0] - Easily create an nth column grid where cycle equals the number of columns.
 * @param {number} [uncycle=0] - Undo a previous cycle value to allow for a new one.
 */
/**
 * Alias for j-span().
 */
/**
 * Reorder columns without altering the HTML.
 * @param {number} [$ratios=0] - Specify how far along you want the element to move.
 * @param {string} [$col-or-span=column] - Specify whether the element has a gutter or not.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Alias for j-shift().
 */
/**
 * Reset an element that has had shift() applied to it.
 */
/**
 * Alias for j-unshift().
 */
/**
 * View the grid and its layers for easy debugging.
 * @param {string} [$color=black] - The background tint applied.
 * @param {boolean} [$important=false] - Whether to apply the style as !important.
 */
/**
 * Aliases for j-edit().
 */
/**
 * Horizontally center an element.
 * @param {number} [$max-width=1410px] - The max width the element can be.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 */
/**
 * Alias for j-center().
 */
/**
 * Uncenter an element.
 */
/**
 * Alias for j-uncenter().
 */
/**
 * Stack an element so that nothing is either side of it.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 * @param {boolean/string} [$align=false] - Specify the text align for the element.
 */
/**
 * Alias for j-stack().
 */
/**
 * Unstack an element.
 */
/**
 * Alias for j-unstack().
 */
/**
 * Center an element on either or both axes.
 * @requires A parent container with relative positioning.
 * @param {string} [$direction=both] - Specify which axes to center the element on.
 */
/**
 * Alias for j-align().
 */
/**
 * Apply a clearfix to an element.
 */
/**
 * Alias for j-cf().
 */
/* http://meyerweb.com/eric/tools/css/reset/
   v2.0 | 20110126
   License: none (public domain)
*/
html, body, div, span, applet, object, iframe,
h1,
h2,
h3,
h4, h2, h3, h4, h4, h5, h6, p, strong, em, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed,
figure, figcaption, footer, header, hgroup,
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline; }

/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure,
footer, header, hgroup, menu, nav, section {
  display: block; }

body {
  line-height: 1; }

ol, ul {
  list-style: none; }

blockquote, q {
  quotes: none; }

blockquote:before, blockquote:after,
q:before, q:after {
  content: '';
  content: none; }

table {
  border-collapse: collapse;
  border-spacing: 0; }

html {
  box-sizing: border-box; }

*, *:before, *:after {
  box-sizing: inherit; }

header {
  background-color: #64AD8A;
  padding: 1em; }

main {
  width: auto;
  max-width: 85%;
  float: none;
  display: block;
  margin-right: auto;
  margin-left: auto;
  padding-left: 0;
  padding-right: 0;
  margin-top: 3em; }

a {
  text-decoration: none; }

body {
  font: 1em "Muli", sans-serif;
  color: #333333; }

pre {
  overflow: auto;
  margin-bottom: 1em;
  font-family: "PT Mono";
  line-height: 1.5em; }

.fullWidth {
  width: 100%; }

.sideMenu {
  float: left;
  clear: none;
  width: 22.75%;
  margin-left: 0;
  margin-right: 3%; }
  .sideMenu:last-child {
    margin-right: 0; }

.pageContent {
  float: left;
  clear: none;
  width: 74.25%;
  margin-left: 0;
  margin-right: 3%; }
  .pageContent:last-child {
    margin-right: 0; }

.code, .notes {
  float: left;
  clear: none;
  width: 48.5%;
  margin-left: 0;
  margin-right: 3%;
  padding: .5em; }
  .code:last-child, .notes:last-child {
    margin-right: 0; }

.clearfix:after {
  content: "";
  visibility: hidden;
  display: block;
  height: 0;
  clear: both; }

.styleguideNav {
  padding: 1em; }

.navLink, .title {
  padding: 0 1em;
  font: 1em "Bitter", serif;
  color: #000000; }
  .navLink:hover, .title:hover {
    color: #FFFFFF; }

.title {
  display: inline;
  padding-right: 1em;
  font: 1.5em "Bitter", serif; }

.sideMenu ul {
  border-width: 1px;
  border-style: solid;
  border-color: #D1D1D1;
  border-radius: .5em; }

.sideLink {
  font-family: "Muli", sans-serif;
  display: block;
  padding: 1em 0 1em 1em;
  color: #333333; }
  .sideLink:hover {
    color: #FFFFFF;
    background-color: #D1D1D1; }

.pageTitle {
  font: 2.25em "Bitter", serif;
  margin-bottom: .5em;
  padding-bottom: .5em;
  border-bottom: 1px solid #D1D1D1; }

.description {
  font: 1.5em "Muli", sans-serif;
  margin-bottom: 3em; }

.styleSample {
  margin-bottom: 3em; }

.subTitle {
  color: #F8613F;
  margin-top: 1em;
  font: 1.5em "Bitter", serif;
  margin-bottom: .5em; }

.demo {
  margin: 1em 0 0 1em;
  border-width: 1px;
  border-style: solid;
  border-color: #D1D1D1;
  border-radius: .5em;
  padding: 1em; }

.demoList > li {
  padding: .5em 0; }

.paddingTopBottom {
  padding: 10px 0; }

.details {
  margin: 1em 0 0 1em; }

.code, .notes {
  background-color: #D1D1D1;
  border-radius: .5em; }

.detailsTitle {
  padding-bottom: .5em;
  font: 1.5em "Muli", sans-serif;
  color: #333333; }

.bodyText {
  font: 1em "Muli", sans-serif;
  padding-bottom: 1em; }

.inlineDiv {
  display: inline-block;
  margin-right: 2em; }

.swatchText {
  color: #FFFFFF;
  text-align: center;
  line-height: 150px;
  text-shadow: 1px 1px 2px #333333; }

.primarySwatch, .secondarySwatch, .thirdSwatch, .fourthSwatch, .accentSwatch1, .accentSwatch2, .accentSwatch3 {
  border-radius: 50%;
  width: 150px;
  height: 150px;
  margin: 0 .25em;
  display: inline-block; }

.primarySwatch {
  background-color: #FA8970; }

.secondarySwatch {
  background-color: #AC6C82; }

.thirdSwatch {
  background-color: #333333; }

.fourthSwatch {
  background-color: #EEEEEE; }

.accentSwatch1 {
  background-color: #64AD8A; }

.accentSwatch2 {
  background-color: #F8613F; }

.accentSwatch3 {
  background-color: #98566D; }

h1, h2, h3, h4 {
  display: block;
  font: 2.75em "Raleway", sans-serif;
  color: #222222; }

h2 {
  font-size: 2.25em;
  margin: 0; }

h3, h4 {
  font-size: 1.25em;
  text-transform: uppercase;
  font-weight: 700;
  letter-spacing: .15em; }

h4 {
  color: #AAABAC;
  font-size: 0.875em; }

.standardP, .largeP, .finePrint {
  font: 1em "Raleway", sans-serif;
  line-height: 1.6;
  color: #222222;
  margin-bottom: 1.25em; }

.largeP {
  font-size: 1.2rem; }

.finePrint {
  font-size: 0.8em; }

strong {
  font-weight: 700; }

em {
  font-style: italic; }

a {
  font: 1em "Raleway", sans-serif;
  color: #FA8970;
  text-decoration: none; }
  a:hover {
    color: #F8613F; }

button, .specialCTA {
  font: 0.625em "Raleway", sans-serif;
  color: #FFFFFF;
  letter-spacing: .15em;
  text-transform: uppercase;
  background-color: #FA8970;
  font-weight: 700;
  text-align: center;
  padding: 1rem 2rem;
  transition: background-color 300ms ease-out;
  border: none;
  border-radius: 2px;
  cursor: pointer; }
  button:hover, .specialCTA:hover {
    background-color: #F8613F; }

.specialCTA {
  background-color: #AC6C82; }
  .specialCTA:hover {
    background-color: #98566D; }

input {
  border-width: 2px;
  border-left-style: solid;
  border-bottom-style: solid;
  border-top-style: none;
  border-right-style: none;
  border-color: #AAABAC;
  transition: all .6s;
  font-weight: 300; }

input[type=text] {
  font: 1.2rem "Raleway", sans-serif;
  padding: .5em;
  color: #222222; }
  input[type=text]:focus {
    background: #EEEEEE;
    border-color: #FA8970;
    outline: 0;
    box-shadow: 0 0 5px #AAABAC; }

label {
  display: block;
  text-transform: uppercase;
  color: #FA8970;
  font: 0.8em "Raleway", sans-serif;
  font-weight: 700;
  cursor: pointer;
  letter-spacing: .1rem;
  line-height: 2; }

.header {
  font: 0.875em "Raleway", sans-serif;
  list-style-type: none; }
  .header li {
    display: inline-block;
    margin-right: 3em; }

.navigationLink, .plus {
  color: #333333;
  transition: color .1s;
  text-transform: uppercase;
  font-weight: 700;
  letter-spacing: 1.6px;
  transition: color .1s; }
  .navigationLink:hover, .plus:hover {
    color: #FA8970; }

.plus {
  color: #FA8970;
  font-weight: 300;
  font-size: 1.25em; }

.footerBackground {
  background-color: #333333; }

.footer {
  font: 0.875em "Montserrat", sans-serif;
  list-style-type: none; }
  .footer li {
    display: inline-block;
    margin-right: 3em; }

.footerLink {
  color: #FFF;
  text-transform: uppercase;
  font-weight: 300;
  transition: color .1s; }
  .footerLink:hover {
    color: #FA8970; }

.logoHeader {
  width: 180px; }

.logoFooterBackground {
  background-color: #333333;
  padding: 1em;
  margin-top: 1em; }

.logoFooter {
  width: 140px; }

.employeePhoto {
  max-width: 200px;
  border-radius: 50%; }

/*# sourceMappingURL=style.css.map */
